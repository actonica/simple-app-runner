## Default values for Redmine Helm Chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Default values for Redmine
##
app:
  replicas: 1
  recreatePod: false

  ## Image configuration.
  image:
    repository: "hello-world"
    tag: "latest"
#    pullPolicy: "Always"
#    pullSecret: ""
    command: []
      # - "/bin/sh"
      # - "-c"
      # - "while true; do echo hello; sleep 10;done"

  initContainer: {}
    # image:
    #   repository: "busybox"
    #   tag: "latest"
    #   pullPolicy: "Always"
    #   command: []

  tolerations: []

  livenessProbe: {}

  cronjob:
    enabled: false
    schedule: "*/5 * * * *"
    # jobTemplate:
    #   spec:
    #     activeDeadlineSeconds: 120

  ## Resource configuration.
  resources: {}
  #  requests:
  #    memory: "256Mi"
  #    cpu: "300m"
  #  limits:
  #    memory: "512Mi"
  #    cpu: "500m"

  ## Environment variables
  env: {}
  #  VAR1: "value1"
  #  VAR2: "value2"

  ## here to provide config map files
  configs: []
  #  - name: appsettings.json
  #    path: /app
  #    content: |-
  #      {
  #        "Logging": {
  #          "LogLevel": {
  #            "Default": "Debug",
  #            "System": "Information",
  #            "Microsoft": "Information"
  #          }
  #        },
  #        "ConnectionStrings": {
  #          "DefaultConnection": "server=1.2.3.4;port=3306;database=passbolt;user=passbolt;password=password;"
  #        },
  #        "FirebaseAuth": [
  #          {
  #          "Audience": "passbolt-public-client",
  #          "Issuer": "https://securetoken.google.com/passbolt-public-client"
  #          }
  #        ]
  #      }  

  ## here to provide secrets files
  secrets: []
    # - name: secret-name
    #   value: value-as-is-do-not-encode
    #   path: "/path"
  # secretsType: "kubernetes.io/dockerconfigjson"

  volumes: []
    # - name: "vol1"
    #   mountPath: /vol1
    #   subPath: /sub1
    #   claimName: claim1
    #   spec:
    #     persistentVolumeClaim:
    #       claimName: claim1

  ## Service configuration.
  ##
  service:
    type: "ClusterIP"
    # containerPort: 80
    # port: "80"
    extra: {}
      # - name: images
      #   spec:
      #     type: ExternalName
      #     externalName: server.domain.tld

  ## Ingress settings
  ## tls - true will enable: 
  ## - tlsSecretName configured - will use custom SSL cert
  ## - letsEncrypt enabled - will use LE
  ingress:
    enabled: true
    tls: true
    serverName: server.k1.domain.tld
    # bluegreen: "blue" or "green"
    # path: /app
    # tlsSecretName: ""
    letsEncrypt: true
    # clusterIssuer: "letsencrypt"
    # permanentRedirect: 301
    # whiteListIPs: "1.2.3.4/32"
    annotations: {}
    extra: {}
      # - name: images
      #   serverName: server.k1.domain.tld
      #   tls: true
      #   path: /images
      #   rewriteTo: /$2
      #   tlsSecretName: "-"
      #   letsEncrypt: false
      #   permanentRedirect: 301
      #   whiteListIPs: "1.2.3.4/32"
      #   backendHttps: true
      #   preserveHost: false
      #   annotations: {}
      #   serviceName: "serviceName"
      #   servicePort: 443

  ## Claims for persistence
  claims: {}
    # - name: claim1
    #   accessMode: "ReadWriteOnce"
    #   size: 10G
    #   storageClass: "-"
